import numpy as np


def multiview_ensemble_clustering(partition_set_list, cluster_num, lambda_1, lambda_2):
    """Input: Basic partitions sets of m views,
    cluster number K, two parameters lambda_1; lambda_2 > 0.
    Output: The final clustering result ."""
    # initialization
    n = datapoint_num(partition_set_list) # number of datapoints
    m = view_num(partition_set_list) # number of views
    J, Z, A = 3 * [np.zeros(shape=(n, n))]
    E, Y, = 2 * [np.zeros(shape=(n, n, m))]
    H = np.zeros(shape=(n, cluster_num))
    w = np.zeros(shape=(n, 1))
    mu, mu_max, epsilon, t = 10e-3, 10e10, 10e-4, 0
    # step 1
    S_v = np.array([sum(partition.dot(partition.transpose()) for partition in partition_set) / len(partition_set)
                    for partition_set in partition_set_list])




def datapoint_num(partition_set_list):
    """input:a list of partition sets
    output:The number of datapoints in the dataset"""
    return partition_set_list[0][0].shape[0]


def view_num(partition_set_list):
    """input:a group of partitions
    output:The number of views of the dataset"""
    # TODO: define this
    return len(partition_set_list)


def kronecker_delta(i, j):
    return int(np.array_equal(i, j))
