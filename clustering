import numpy as np
from numpy.linalg import norm, inv

def multiview_ensemble_clustering(partition_set_list, cluster_num, lambda_1, lambda_2):
    """Input: Basic partitions sets of m views,
    cluster number K, two parameters lambda_1; lambda_2 > 0.
    Output: The final clustering result ."""
    # initialization
    n = datapoint_num(partition_set_list) # number of datapoints
    m = view_num(partition_set_list) # number of views
    J, Z, A = 3 * [np.zeros(shape=(n, n))]
    E, Y, = 2 * [np.zeros(shape=(n, n, m))]
    H = np.zeros(shape=(n, cluster_num))
    w = np.zeros(shape=(n, 1))
    mu, mu_max, epsilon, t = 10e-3, 10e10, 10e-4, 0
    n_ones = np.ones(n)
    # step 1
    S = np.array([sum(partition @ partition.T for partition in partition_set) / len(partition_set) for partition_set in partition_set_list])
    # step 2
    while not_converged():
        # step 3
        J = singular_value_threshold(Z + A / mu, lambda_1 / mu)
        # step 4
        P = np.array([[norm(H[i] - H[j]) ** 2 for j in range(n)] for i in range(n)])
        eta = norm(P) ** 2 + (norm(S, axis=(1, 2)) ** 2).sum() + 1 + norm(n_ones) ** 2
        F = P / (2 * mu) + S.transpose(0, 2, 1) @ (S @ Z + E - S - H @ H.T - Y / mu).sum(axis=0) + (Z - J + A / mu) + (Z @ n_ones - n_ones + w / mu) @ np.atleast_2d(n_ones).T
        Z = Z - inv(eta) @ F
        Z[Z < 0] = 0
        # step 5
        E = singular_value_shrinkage(S + H @ H.T - S @ Z + Y / mu, lambda_2 / mu)
        # step 6





def datapoint_num(partition_set_list):
    """input:a list of partition sets
    output:The number of datapoints in the dataset"""
    return partition_set_list[0][0].shape[0]


def view_num(partition_set_list):
    """input:a group of partitions
    output:The number of views of the dataset"""
    return len(partition_set_list)


def kronecker_delta(i, j):
    return int(np.array_equal(i, j))

def not_converged():
    pass


def singular_value_threshold(matrix, tau):
    pass

def singular_value_shrinkage(matrix, tau):
    pass